{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["services_notes","nonExisting","id","content","date","important","axios","get","then","response","data","concat","newObject","post","put","Note","_ref","note","toggleImportance","label","react_default","a","createElement","className","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","type","value","onChange","target","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.dc95ca9f.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const nonExisting = {\n     id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return axios\n    .get(baseUrl)\n    .then(response => response.data.concat(nonExisting));\n}\nconst create = (newObject) => axios\n  .post(baseUrl, newObject)\n  .then(response => response.data);\nconst update = (id, newObject) => axios\n  .put(`${baseUrl}/${id}`, newObject)\n  .then(response => response.data);\n\nexport default {\n  getAll, create, update\n};\n","import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'important';\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n}\n\nexport default Note;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport noteService from './services/notes';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  )\n};\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  );\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    console.log('effect');\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes);\n        console.log(`there's ${notes.length} notes`);\n      });\n  };\n\n  useEffect(hook, []);\n\n  console.log('render', notes.length, 'notes');\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(n => n.id !== id ? n : returnedNote));\n      })\n      .catch(() => {\n        setErrorMessage(\n          `the note '${note.content}' was already deleted from the server`\n        );\n        setTimeout(() => setErrorMessage(null), 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  }\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  );\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    };\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote('');\n      })\n  }\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll(!showAll)}>{showAll ? 'Important' : 'All'}</button>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input type=\"text\" value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}